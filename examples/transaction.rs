use std::sync::Arc;

use arrow::{
    array::{
        Array, ArrayBuilder, BooleanArray, BooleanBuilder, StringArray, StringBuilder, StructArray,
        StructBuilder, UInt32Array, UInt32Builder, UInt64Array, UInt64Builder,
    },
    datatypes::{DataType, Field, Fields, SchemaRef},
    record_batch::RecordBatch,
};
use elsm::{
    oracle::LocalOracle,
    record::RecordType,
    schema::{BatchBuilder, Schema, SchemaBuilder},
    serdes::{Decode, Encode},
    stream::record_batch_stream::RecordBatchStream,
    wal::provider::in_mem::InMemProvider,
    Db, DbOption,
};
use elsm_marco::elsm_schema;
use futures::{AsyncRead, AsyncWrite, StreamExt};
use lazy_static::lazy_static;
use tokio::io;

#[derive(Debug, Eq, PartialEq)]
// Use marco `[elsm_schema]` to generate the required implementation
#[elsm_schema]
pub(crate) struct User {
    // primary key must exist and be unique (currently)
    #[primary_key]
    pub(crate) id: u64,
    pub(crate) name: String,
    pub(crate) is_human: bool,
    pub(crate) age: u32,
}

#[tokio::main]
async fn main() {
    let db = Arc::new(Db::new(
        LocalOracle::default(),
        InMemProvider::default(),
        DbOption::new("/transaction"),
    )
        .await
        .unwrap());
    let mut txn = db.new_txn();

    // Tips: `UserInner::new` is a method generated by `elsm_schema`
    txn.set(UserInner::new(5, "5".to_string(), false, 0));

    assert_eq!(
        txn.get(&5).await,
        Some(UserInner::new(5, "5".to_string(), false, 0)),
    );

    txn.remove(5);

    assert_eq!(
        txn.get(&5).await,
        None,
    );
}